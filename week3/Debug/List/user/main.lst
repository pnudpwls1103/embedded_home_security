###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         22/Dec/2022  16:48:09
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  C:\Embedded\week3\user\main.c
#    Command line      =
#        -f C:\Embedded\week3\Debug\Obj\user\main.o.rsp
#        (C:\Embedded\week3\user\main.c -D USE_STDPERIPH_DRIVER -D STM32F10X_CL
#        -lC C:\Embedded\week3\Debug\List\user -o
#        C:\Embedded\week3\Debug\Obj\user --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Embedded\week3\libraries\CMSIS\DeviceSupport\ -I
#        C:\Embedded\week3\libraries\CMSIS\DeviceSupport\Startup\ -I
#        C:\Embedded\week3\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\ -I
#        C:\Embedded\week3\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\ -I
#        C:\Embedded\week3\user\ -I C:\Embedded\week3\libraries\LCD\ -I
#        C:\Embedded\week3\user\inc\ -Ol -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n C:\Embedded\week3\Debug\Obj\user\main.o.d
#    Locale            =  C
#    List file         =  C:\Embedded\week3\Debug\List\user\main.lst
#    Object file       =  C:\Embedded\week3\Debug\Obj\user\main.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Embedded\week3\user\main.c
      1          #include "stm32f10x.h"

   \                                 In section .text, align 4, keep-with-next
   \   static __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable12
   \       0x14   0xB240             SXTB     R0,R0
   \       0x16   0x0940             LSRS     R0,R0,#+5
   \       0x18   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1C   0x4770             BX       LR
      2          #include "core_cm3.h"
      3          #include "misc.h"
      4          #include "stm32f10x_gpio.h"
      5          #include "stm32f10x_rcc.h"
      6          #include "stm32f10x_usart.h"
      7          #include "stm32f10x_adc.h"
      8          #include "lcd.h"
      9          #include "touch.h"
     10          
     11          #define TEMPMAX 1000
     12          #define GASMAX  800
     13          

   \                                 In section .bss, align 2
     14          volatile uint16_t ADC_Value[1];
   \                     ADC_Value:
   \        0x0                      DS8 2
     15          

   \                                 In section .bss, align 4
     16          volatile int btnFlag = 0;
   \                     btnFlag:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     17          volatile int gasFlag = 0;
   \                     gasFlag:
   \        0x0                      DS8 4
     18          

   \                                 In section .data, align 4
     19          char password[] = {'1', '2', '3', '4'};
   \                     password:
   \        0x0   0x31 0x32          DC8 49, 50, 51, 52

   \              0x33 0x34
     20          
     21          

   \                                 In section .bss, align 4
     22          volatile int idx = 0;
   \                     idx:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     23          volatile int wrongflag = 0;
   \                     wrongflag:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     24          volatile int wrongcnt = 0;
   \                     wrongcnt:
   \        0x0                      DS8 4
     25          
     26          void RCCInit(void);
     27          void GpioInit(void);
     28          void EXTI_Configure(void);
     29          void DMA_Configure(void);
     30          void ADC_Configure(void);
     31          void NVIC_Configure(void);
     32          void TIM_Configure(void);
     33          
     34          void EXTI15_10_IRQHandler(void);
     35          void DMA1_Channel1_IRQHandler(void);
     36          
     37          void ControlPWM(int PWM);
     38          void SetFireAlarm(void);
     39          void ResetFireAlarm(void);
     40          char GetLCDNumber(uint16_t x, uint16_t y);
     41          

   \                                 In section .text, align 2, keep-with-next
     42          void RCCInit(void)
     43          {   
   \                     RCCInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     44                  // Althernate Function IO 
     45                  RCC_APB2PeriphClockCmd(RCC_APB2ENR_AFIOEN, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     46                  
     47                  // 가스센서 ADC
     48                  RCC_APB2PeriphClockCmd(RCC_APB2ENR_ADC1EN, ENABLE);
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0xF44F 0x7000      MOV      R0,#+512
   \       0x10   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     49                  
     50                  // DMA
     51                  RCC_AHBPeriphClockCmd(RCC_AHBENR_DMA1EN, ENABLE);
   \       0x14   0x2101             MOVS     R1,#+1
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
     52                  
     53                  // PWM Digital pin
     54                  RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPBEN, ENABLE);
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0x2008             MOVS     R0,#+8
   \       0x20   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     55                  
     56                  // 릴레이모듈 (부저)
     57                  RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPCEN, ENABLE);
   \       0x24   0x2101             MOVS     R1,#+1
   \       0x26   0x2010             MOVS     R0,#+16
   \       0x28   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     58                  RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPDEN, ENABLE);
   \       0x2C   0x2101             MOVS     R1,#+1
   \       0x2E   0x2020             MOVS     R0,#+32
   \       0x30   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     59                  
     60                  // TIMER
     61                  RCC_APB1PeriphClockCmd(RCC_APB1ENR_TIM3EN, ENABLE);
   \       0x34   0x2101             MOVS     R1,#+1
   \       0x36   0x2002             MOVS     R0,#+2
   \       0x38   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     62          }
   \       0x3C   0xBD01             POP      {R0,PC}
     63          
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void GpioInit(void)
     66          {
   \                     GpioInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     67                  GPIO_InitTypeDef GPIO_InitStructure;
     68                  
     69                  // 가스센서 (PA5)
     70                  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
   \        0x2   0x2020             MOVS     R0,#+32
   \        0x4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     71                  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \        0x8   0x2003             MOVS     R0,#+3
   \        0xA   0xF88D 0x0002      STRB     R0,[SP, #+2]
     72                  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0xF88D 0x0003      STRB     R0,[SP, #+3]
     73                  GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x14   0x4669             MOV      R1,SP
   \       0x16   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \       0x1A   0x.... 0x....      BL       GPIO_Init
     74                  
     75                  // 버튼 (PD11)
     76                  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
   \       0x1E   0xF44F 0x6000      MOV      R0,#+2048
   \       0x22   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     77                  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x26   0x2003             MOVS     R0,#+3
   \       0x28   0xF88D 0x0002      STRB     R0,[SP, #+2]
     78                  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   \       0x2C   0x2048             MOVS     R0,#+72
   \       0x2E   0xF88D 0x0003      STRB     R0,[SP, #+3]
     79                  GPIO_Init(GPIOD, &GPIO_InitStructure);
   \       0x32   0x4669             MOV      R1,SP
   \       0x34   0x.... 0x....      LDR.W    R0,??DataTable12_2
   \       0x38   0x.... 0x....      BL       GPIO_Init
     80                  
     81                  // 펌프 - 릴레이모듈 (PC8)
     82                  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
   \       0x3C   0xF44F 0x7040      MOV      R0,#+768
   \       0x40   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     83                  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x44   0x2003             MOVS     R0,#+3
   \       0x46   0xF88D 0x0002      STRB     R0,[SP, #+2]
     84                  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \       0x4A   0x2010             MOVS     R0,#+16
   \       0x4C   0xF88D 0x0003      STRB     R0,[SP, #+3]
     85                  GPIO_Init(GPIOC, &GPIO_InitStructure);
   \       0x50   0x4669             MOV      R1,SP
   \       0x52   0x....             LDR.N    R0,??DataTable12_3
   \       0x54   0x.... 0x....      BL       GPIO_Init
     86                  
     87                  // TIMER3_CH3 (PB0)
     88                  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \       0x58   0x2001             MOVS     R0,#+1
   \       0x5A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     89                  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x5E   0x2003             MOVS     R0,#+3
   \       0x60   0xF88D 0x0002      STRB     R0,[SP, #+2]
     90                  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x64   0x2018             MOVS     R0,#+24
   \       0x66   0xF88D 0x0003      STRB     R0,[SP, #+3]
     91                  GPIO_Init(GPIOB, &GPIO_InitStructure);
   \       0x6A   0x4669             MOV      R1,SP
   \       0x6C   0x....             LDR.N    R0,??DataTable12_4
   \       0x6E   0x.... 0x....      BL       GPIO_Init
     92          }
   \       0x72   0xBD01             POP      {R0,PC}
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void EXTI_Configure(void)
     95          {
   \                     EXTI_Configure: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
     96                  EXTI_InitTypeDef EXTI_InitStructure;
     97                  
     98                  // 버튼 EXTI (PD11)
     99                  GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource11);
   \        0x2   0x210B             MOVS     R1,#+11
   \        0x4   0x2003             MOVS     R0,#+3
   \        0x6   0x.... 0x....      BL       GPIO_EXTILineConfig
    100                  EXTI_InitStructure.EXTI_Line = EXTI_Line11;
   \        0xA   0xF44F 0x6000      MOV      R0,#+2048
   \        0xE   0x9000             STR      R0,[SP, #+0]
    101                  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xF88D 0x0004      STRB     R0,[SP, #+4]
    102                  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \       0x16   0x200C             MOVS     R0,#+12
   \       0x18   0xF88D 0x0005      STRB     R0,[SP, #+5]
    103                  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0xF88D 0x0006      STRB     R0,[SP, #+6]
    104                  EXTI_Init(&EXTI_InitStructure);
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x.... 0x....      BL       EXTI_Init
    105          }
   \       0x28   0xBD07             POP      {R0-R2,PC}
    106          

   \                                 In section .text, align 2, keep-with-next
    107          void DMA_Configure(void) {
   \                     DMA_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB08B             SUB      SP,SP,#+44
    108                  DMA_InitTypeDef DMA_Instructure;
    109          
    110                  DMA_Instructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
   \        0x4   0x....             LDR.N    R0,??DataTable12_5
   \        0x6   0x9000             STR      R0,[SP, #+0]
    111                  DMA_Instructure.DMA_MemoryBaseAddr = (uint32_t)&ADC_Value[0];
   \        0x8   0x....             LDR.N    R0,??DataTable12_6
   \        0xA   0x9001             STR      R0,[SP, #+4]
    112                  DMA_Instructure.DMA_DIR = DMA_DIR_PeripheralSRC;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9002             STR      R0,[SP, #+8]
    113                  DMA_Instructure.DMA_BufferSize = 1;
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0x9003             STR      R0,[SP, #+12]
    114                  DMA_Instructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x9004             STR      R0,[SP, #+16]
    115                  DMA_Instructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   \       0x18   0x2080             MOVS     R0,#+128
   \       0x1A   0x9005             STR      R0,[SP, #+20]
    116                  DMA_Instructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
   \       0x1C   0xF44F 0x7080      MOV      R0,#+256
   \       0x20   0x9006             STR      R0,[SP, #+24]
    117                  DMA_Instructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
   \       0x22   0xF44F 0x6080      MOV      R0,#+1024
   \       0x26   0x9007             STR      R0,[SP, #+28]
    118                  DMA_Instructure.DMA_Mode = DMA_Mode_Circular;
   \       0x28   0x2020             MOVS     R0,#+32
   \       0x2A   0x9008             STR      R0,[SP, #+32]
    119                  DMA_Instructure.DMA_Priority = DMA_Priority_High;
   \       0x2C   0xF44F 0x5000      MOV      R0,#+8192
   \       0x30   0x9009             STR      R0,[SP, #+36]
    120                  DMA_Instructure.DMA_M2M = DMA_M2M_Disable;
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x900A             STR      R0,[SP, #+40]
    121                  
    122                  DMA_Init(DMA1_Channel1, &DMA_Instructure);
   \       0x36   0x....             LDR.N    R4,??DataTable12_7
   \       0x38   0x4669             MOV      R1,SP
   \       0x3A   0x0020             MOVS     R0,R4
   \       0x3C   0x.... 0x....      BL       DMA_Init
    123                  DMA_Cmd(DMA1_Channel1, ENABLE);
   \       0x40   0x2101             MOVS     R1,#+1
   \       0x42   0x0020             MOVS     R0,R4
   \       0x44   0x.... 0x....      BL       DMA_Cmd
    124                  DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
   \       0x48   0x2201             MOVS     R2,#+1
   \       0x4A   0x2102             MOVS     R1,#+2
   \       0x4C   0x0020             MOVS     R0,R4
   \       0x4E   0x.... 0x....      BL       DMA_ITConfig
    125          }
   \       0x52   0xB00C             ADD      SP,SP,#+48
   \       0x54   0xBD10             POP      {R4,PC}
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void ADC_Configure(void)
    128          {
   \                     ADC_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
    129                  ADC_InitTypeDef ADC_InitStructure;
    130                  
    131                  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x9000             STR      R0,[SP, #+0]
    132                  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xF88D 0x0004      STRB     R0,[SP, #+4]
    133                  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xF88D 0x0005      STRB     R0,[SP, #+5]
    134                  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \       0x14   0xF45F 0x2060      MOVS     R0,#+917504
   \       0x18   0x9002             STR      R0,[SP, #+8]
    135                  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9003             STR      R0,[SP, #+12]
    136                  ADC_InitStructure.ADC_NbrOfChannel = 1;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0xF88D 0x0010      STRB     R0,[SP, #+16]
    137                
    138                  ADC_Init(ADC1, &ADC_InitStructure);
   \       0x24   0x....             LDR.N    R4,??DataTable12_8
   \       0x26   0x4669             MOV      R1,SP
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       ADC_Init
    139          
    140                  ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 1, ADC_SampleTime_41Cycles5);
   \       0x2E   0x2304             MOVS     R3,#+4
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x2105             MOVS     R1,#+5
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       ADC_RegularChannelConfig
    141          
    142                  ADC_DMACmd(ADC1, ENABLE);
   \       0x3A   0x2101             MOVS     R1,#+1
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       ADC_DMACmd
    143                  
    144                  ADC_Cmd(ADC1, ENABLE);
   \       0x42   0x2101             MOVS     R1,#+1
   \       0x44   0x0020             MOVS     R0,R4
   \       0x46   0x.... 0x....      BL       ADC_Cmd
    145                  
    146                  ADC_ResetCalibration(ADC1);
   \       0x4A   0x0020             MOVS     R0,R4
   \       0x4C   0x.... 0x....      BL       ADC_ResetCalibration
    147                  
    148                  while(ADC_GetResetCalibrationStatus(ADC1)) {}
   \                     ??ADC_Configure_0: (+1)
   \       0x50   0x0020             MOVS     R0,R4
   \       0x52   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD1FA             BNE.N    ??ADC_Configure_0
    149                  
    150                  ADC_StartCalibration(ADC1);
   \       0x5A   0x0020             MOVS     R0,R4
   \       0x5C   0x.... 0x....      BL       ADC_StartCalibration
    151                  
    152                  while(ADC_GetCalibrationStatus(ADC1)) {}
   \                     ??ADC_Configure_1: (+1)
   \       0x60   0x0020             MOVS     R0,R4
   \       0x62   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD1FA             BNE.N    ??ADC_Configure_1
    153                  
    154                  ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \       0x6A   0x2101             MOVS     R1,#+1
   \       0x6C   0x0020             MOVS     R0,R4
   \       0x6E   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
    155                  
    156          }
   \       0x72   0xB006             ADD      SP,SP,#+24
   \       0x74   0xBD10             POP      {R4,PC}
    157          

   \                                 In section .text, align 2, keep-with-next
    158          void NVIC_Configure(void)
    159          {
   \                     NVIC_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    160                  NVIC_InitTypeDef NVIC_InitStructure;
    161          
    162                  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
   \        0x2   0xF44F 0x60C0      MOV      R0,#+1536
   \        0x6   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    163                  
    164                  // 버튼 NVIC
    165                  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
   \        0xA   0x2028             MOVS     R0,#+40
   \        0xC   0xF88D 0x0000      STRB     R0,[SP, #+0]
    166                  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xF88D 0x0001      STRB     R0,[SP, #+1]
    167                  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x1;
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xF88D 0x0002      STRB     R0,[SP, #+2]
    168                  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0xF88D 0x0003      STRB     R0,[SP, #+3]
    169                  NVIC_Init(&NVIC_InitStructure);
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x.... 0x....      BL       NVIC_Init
    170                  
    171                  // PWM Timer3 NVIC
    172                  NVIC_EnableIRQ(TIM3_IRQn);
   \       0x28   0x201D             MOVS     R0,#+29
   \       0x2A   0x.... 0x....      BL       __NVIC_EnableIRQ
    173                  NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
   \       0x2E   0x201D             MOVS     R0,#+29
   \       0x30   0xF88D 0x0000      STRB     R0,[SP, #+0]
    174                  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
   \       0x34   0x2001             MOVS     R0,#+1
   \       0x36   0xF88D 0x0001      STRB     R0,[SP, #+1]
    175                  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x1;
   \       0x3A   0x2001             MOVS     R0,#+1
   \       0x3C   0xF88D 0x0002      STRB     R0,[SP, #+2]
    176                  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \       0x40   0x2001             MOVS     R0,#+1
   \       0x42   0xF88D 0x0003      STRB     R0,[SP, #+3]
    177                  NVIC_Init(&NVIC_InitStructure);
   \       0x46   0x4668             MOV      R0,SP
   \       0x48   0x.... 0x....      BL       NVIC_Init
    178                  
    179                  // DMA
    180                  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
   \       0x4C   0x200B             MOVS     R0,#+11
   \       0x4E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    181                  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
   \       0x52   0x2001             MOVS     R0,#+1
   \       0x54   0xF88D 0x0001      STRB     R0,[SP, #+1]
    182                  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x1;
   \       0x58   0x2001             MOVS     R0,#+1
   \       0x5A   0xF88D 0x0002      STRB     R0,[SP, #+2]
    183                  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \       0x5E   0x2001             MOVS     R0,#+1
   \       0x60   0xF88D 0x0003      STRB     R0,[SP, #+3]
    184                  NVIC_Init(&NVIC_InitStructure);
   \       0x64   0x4668             MOV      R0,SP
   \       0x66   0x.... 0x....      BL       NVIC_Init
    185          }
   \       0x6A   0xBD01             POP      {R0,PC}
    186          

   \                                 In section .text, align 2, keep-with-next
    187          void TIM_Configure(void)
    188          {
   \                     TIM_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
    189                  TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    190                  TIM_OCInitTypeDef       TIM_OCInitStructure;
    191                  
    192                  // TIM3_CH3 (PWM)
    193                  TIM_TimeBaseStructure.TIM_Period = 20000;
   \        0x4   0xF644 0x6020      MOVW     R0,#+20000
   \        0x8   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    194                  TIM_TimeBaseStructure.TIM_Prescaler = 72;
   \        0xC   0x2048             MOVS     R0,#+72
   \        0xE   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    195                  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    196                  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \       0x18   0x2010             MOVS     R0,#+16
   \       0x1A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    197                  
    198                  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x1E   0x2060             MOVS     R0,#+96
   \       0x20   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    199                  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    200                  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \       0x2A   0x2001             MOVS     R0,#+1
   \       0x2C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    201                  TIM_OCInitStructure.TIM_Pulse = 1500;
   \       0x30   0xF240 0x50DC      MOVW     R0,#+1500
   \       0x34   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    202                  TIM_OC3Init(TIM3, &TIM_OCInitStructure);
   \       0x38   0x....             LDR.N    R4,??DataTable12_9
   \       0x3A   0xA903             ADD      R1,SP,#+12
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       TIM_OC3Init
    203                  
    204                  TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
   \       0x42   0x4669             MOV      R1,SP
   \       0x44   0x0020             MOVS     R0,R4
   \       0x46   0x.... 0x....      BL       TIM_TimeBaseInit
    205                  TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);
   \       0x4A   0x2100             MOVS     R1,#+0
   \       0x4C   0x0020             MOVS     R0,R4
   \       0x4E   0x.... 0x....      BL       TIM_OC3PreloadConfig
    206                  TIM_ARRPreloadConfig(TIM3, ENABLE);
   \       0x52   0x2101             MOVS     R1,#+1
   \       0x54   0x0020             MOVS     R0,R4
   \       0x56   0x.... 0x....      BL       TIM_ARRPreloadConfig
    207                  TIM_Cmd(TIM3, ENABLE);
   \       0x5A   0x2101             MOVS     R1,#+1
   \       0x5C   0x0020             MOVS     R0,R4
   \       0x5E   0x.... 0x....      BL       TIM_Cmd
    208          }
   \       0x62   0xB008             ADD      SP,SP,#+32
   \       0x64   0xBD10             POP      {R4,PC}
    209          

   \                                 In section .text, align 2, keep-with-next
    210          void EXTI15_10_IRQHandler() {
   \                     EXTI15_10_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    211              if (EXTI_GetITStatus(EXTI_Line11) != RESET) {
   \        0x2   0xF44F 0x6000      MOV      R0,#+2048
   \        0x6   0x.... 0x....      BL       EXTI_GetITStatus
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD013             BEQ.N    ??EXTI15_10_IRQHandler_0
    212                  if (GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_11) == Bit_RESET){
   \        0xE   0xF44F 0x6100      MOV      R1,#+2048
   \       0x12   0x....             LDR.N    R0,??DataTable12_2
   \       0x14   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD108             BNE.N    ??EXTI15_10_IRQHandler_1
    213                      btnFlag = (btnFlag == 0) ? 1 : 0;
   \       0x1C   0x....             LDR.N    R1,??DataTable12_10
   \       0x1E   0x6808             LDR      R0,[R1, #+0]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD102             BNE.N    ??EXTI15_10_IRQHandler_2
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0x6008             STR      R0,[R1, #+0]
   \       0x28   0xE001             B.N      ??EXTI15_10_IRQHandler_1
   \                     ??EXTI15_10_IRQHandler_2: (+1)
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x6008             STR      R0,[R1, #+0]
    214                      
    215                  }
    216          
    217                  EXTI_ClearITPendingBit(EXTI_Line11);
   \                     ??EXTI15_10_IRQHandler_1: (+1)
   \       0x2E   0xF44F 0x6000      MOV      R0,#+2048
   \       0x32   0x.... 0x....      BL       EXTI_ClearITPendingBit
    218              }
    219          }
   \                     ??EXTI15_10_IRQHandler_0: (+1)
   \       0x36   0xBD01             POP      {R0,PC}
    220          

   \                                 In section .text, align 2, keep-with-next
    221          void DMA1_Channel1_IRQHandler(void)
    222          {
   \                     DMA1_Channel1_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    223                  if(DMA_GetITStatus(DMA1_IT_TC1)){
   \        0x2   0x2002             MOVS     R0,#+2
   \        0x4   0x.... 0x....      BL       DMA_GetITStatus
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD00F             BEQ.N    ??DMA1_Channel1_IRQHandler_0
    224                          gasFlag = (ADC_Value[0] > GASMAX) ? 1: 0;
   \        0xC   0x....             LDR.N    R0,??DataTable12_6
   \        0xE   0x8800             LDRH     R0,[R0, #+0]
   \       0x10   0xF240 0x3121      MOVW     R1,#+801
   \       0x14   0x4288             CMP      R0,R1
   \       0x16   0xDB03             BLT.N    ??DMA1_Channel1_IRQHandler_1
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0x....             LDR.N    R1,??DataTable12_11
   \       0x1C   0x6008             STR      R0,[R1, #+0]
   \       0x1E   0xE002             B.N      ??DMA1_Channel1_IRQHandler_2
   \                     ??DMA1_Channel1_IRQHandler_1: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x....             LDR.N    R1,??DataTable12_11
   \       0x24   0x6008             STR      R0,[R1, #+0]
    225                          DMA_ClearITPendingBit(DMA1_IT_GL1);
   \                     ??DMA1_Channel1_IRQHandler_2: (+1)
   \       0x26   0x2001             MOVS     R0,#+1
   \       0x28   0x.... 0x....      BL       DMA_ClearITPendingBit
    226                  }
    227          }
   \                     ??DMA1_Channel1_IRQHandler_0: (+1)
   \       0x2C   0xBD01             POP      {R0,PC}
    228          
    229          

   \                                 In section .text, align 2, keep-with-next
    230          void ControlPWM(int PWM) {
   \                     ControlPWM: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    231                  TIM_OCInitTypeDef       TIM_OCInitStructure;
    232                  
    233                  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \        0x2   0x2160             MOVS     R1,#+96
   \        0x4   0xF8AD 0x1000      STRH     R1,[SP, #+0]
    234                  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0xF8AD 0x1008      STRH     R1,[SP, #+8]
    235                  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \        0xE   0x2101             MOVS     R1,#+1
   \       0x10   0xF8AD 0x1002      STRH     R1,[SP, #+2]
    236                  TIM_OCInitStructure.TIM_Pulse = PWM;
   \       0x14   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    237                  TIM_OC3Init(TIM3, &TIM_OCInitStructure);
   \       0x18   0x4669             MOV      R1,SP
   \       0x1A   0x....             LDR.N    R0,??DataTable12_9
   \       0x1C   0x.... 0x....      BL       TIM_OC3Init
    238          }
   \       0x20   0xB005             ADD      SP,SP,#+20
   \       0x22   0xBD00             POP      {PC}
    239          

   \                                 In section .text, align 2, keep-with-next
    240          void SetFireAlarm()
    241          {
   \                     SetFireAlarm: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    242                  GPIO_SetBits(GPIOC, GPIO_Pin_8);
   \        0x2   0x....             LDR.N    R4,??DataTable12_3
   \        0x4   0xF44F 0x7180      MOV      R1,#+256
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       GPIO_SetBits
    243                  GPIO_SetBits(GPIOC, GPIO_Pin_9);
   \        0xE   0xF44F 0x7100      MOV      R1,#+512
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       GPIO_SetBits
    244                  ControlPWM(1000);
   \       0x18   0xF44F 0x707A      MOV      R0,#+1000
   \       0x1C   0x.... 0x....      BL       ControlPWM
    245          }
   \       0x20   0xBD10             POP      {R4,PC}
    246          

   \                                 In section .text, align 2, keep-with-next
    247          void ResetFireAlarm()
    248          {
   \                     ResetFireAlarm: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    249                  GPIO_ResetBits(GPIOC, GPIO_Pin_8);
   \        0x2   0x....             LDR.N    R4,??DataTable12_3
   \        0x4   0xF44F 0x7180      MOV      R1,#+256
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       GPIO_ResetBits
    250                  GPIO_ResetBits(GPIOC, GPIO_Pin_9);
   \        0xE   0xF44F 0x7100      MOV      R1,#+512
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       GPIO_ResetBits
    251                  
    252                  ControlPWM(2000);
   \       0x18   0xF44F 0x60FA      MOV      R0,#+2000
   \       0x1C   0x.... 0x....      BL       ControlPWM
    253          }
   \       0x20   0xBD10             POP      {R4,PC}
    254          

   \                                 In section .text, align 2, keep-with-next
    255          char GetLCDNumber(uint16_t x, uint16_t y)
    256          {
   \                     GetLCDNumber: (+1)
   \        0x0   0xB47E             PUSH     {R1-R6}
    257                  char keypad[4][3] = {
    258                                  { '1', '2', '3' },
    259                                  { '4', '5', '6' },
    260                                  { '7', '8', '9'},
    261                                  { '*', '0', '#' },
    262                  };
   \        0x2   0x466A             MOV      R2,SP
   \        0x4   0x....             LDR.N    R3,??DataTable12_12
   \        0x6   0xE893 0x0070      LDM      R3,{R4-R6}
   \        0xA   0xE882 0x0070      STM      R2,{R4-R6}
    263            
    264                  // 2차원 배열 - x / 80 + 1, y / 80 + 1로 처리
    265                  char result = 'a';
   \        0xE   0x2261             MOVS     R2,#+97
    266                  if(x >= 999 || y >= 999) {
   \       0x10   0xF240 0x32E7      MOVW     R2,#+999
   \       0x14   0x0003             MOVS     R3,R0
   \       0x16   0xB29B             UXTH     R3,R3
   \       0x18   0x4293             CMP      R3,R2
   \       0x1A   0xDA03             BGE.N    ??GetLCDNumber_0
   \       0x1C   0x000B             MOVS     R3,R1
   \       0x1E   0xB29B             UXTH     R3,R3
   \       0x20   0x4293             CMP      R3,R2
   \       0x22   0xDB01             BLT.N    ??GetLCDNumber_1
    267                          result = 'a';
   \                     ??GetLCDNumber_0: (+1)
   \       0x24   0x2061             MOVS     R0,#+97
   \       0x26   0xE00C             B.N      ??GetLCDNumber_2
    268                  }
    269                  else{
    270                          result = keypad[x / (80+1)][y / (80+1)];
   \                     ??GetLCDNumber_1: (+1)
   \       0x28   0xB289             UXTH     R1,R1
   \       0x2A   0x2251             MOVS     R2,#+81
   \       0x2C   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \       0x30   0xB280             UXTH     R0,R0
   \       0x32   0x2251             MOVS     R2,#+81
   \       0x34   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \       0x38   0x2003             MOVS     R0,#+3
   \       0x3A   0x4342             MULS     R2,R0,R2
   \       0x3C   0x4668             MOV      R0,SP
   \       0x3E   0x4410             ADD      R0,R0,R2
   \       0x40   0x5C40             LDRB     R0,[R0, R1]
    271                  }
    272          
    273                  return result;
   \                     ??GetLCDNumber_2: (+1)
   \       0x42   0xB2C0             UXTB     R0,R0
   \       0x44   0xBC7E             POP      {R1-R6}
   \       0x46   0x4770             BX       LR
    274          }
    275          

   \                                 In section .text, align 2, keep-with-next
    276          void Delay(void) {
    277          	int i;
    278          	for (i = 0; i < 1000000; i++) {}
   \                     Delay: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0xE000             B.N      ??Delay_0
   \                     ??Delay_1: (+1)
   \        0x4   0x1C40             ADDS     R0,R0,#+1
   \                     ??Delay_0: (+1)
   \        0x6   0x....             LDR.N    R1,??DataTable12_13
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xDBFB             BLT.N    ??Delay_1
    279          }
   \        0xC   0x4770             BX       LR
    280          

   \                                 In section .text, align 2, keep-with-next
    281          int main(void)
    282          {
   \                     main: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    283                  SystemInit();
   \        0x2   0x.... 0x....      BL       SystemInit
    284                  RCCInit();
   \        0x6   0x.... 0x....      BL       RCCInit
    285                  
    286                  GpioInit();
   \        0xA   0x.... 0x....      BL       GpioInit
    287                  EXTI_Configure();
   \        0xE   0x.... 0x....      BL       EXTI_Configure
    288                  DMA_Configure();
   \       0x12   0x.... 0x....      BL       DMA_Configure
    289                  ADC_Configure();
   \       0x16   0x.... 0x....      BL       ADC_Configure
    290                  TIM_Configure();
   \       0x1A   0x.... 0x....      BL       TIM_Configure
    291                  NVIC_Configure();
   \       0x1E   0x.... 0x....      BL       NVIC_Configure
    292                   
    293                  GPIO_ResetBits(GPIOC, GPIO_Pin_8);
   \       0x22   0x....             LDR.N    R4,??DataTable12_3
   \       0x24   0xF44F 0x7180      MOV      R1,#+256
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       GPIO_ResetBits
    294                  GPIO_ResetBits(GPIOC, GPIO_Pin_9);
   \       0x2E   0xF44F 0x7100      MOV      R1,#+512
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0x.... 0x....      BL       GPIO_ResetBits
   \       0x38   0xE002             B.N      ??main_0
    295          
    296                  while(1) {
    297                          if(gasFlag) {
    298                                  SetFireAlarm();
    299                          }
    300                          else {
    301                                  ResetFireAlarm();
   \                     ??main_1: (+1)
   \       0x3A   0x.... 0x....      BL       ResetFireAlarm
   \       0x3E   0xE005             B.N      ??main_2
    302                          }
   \                     ??main_0: (+1)
   \       0x40   0x....             LDR.N    R0,??DataTable12_11
   \       0x42   0x6800             LDR      R0,[R0, #+0]
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD0F8             BEQ.N    ??main_1
   \       0x48   0x.... 0x....      BL       SetFireAlarm
    303          
    304                          Delay();
   \                     ??main_2: (+1)
   \       0x4C   0x.... 0x....      BL       Delay
   \       0x50   0xE7F6             B.N      ??main_0
    305                  }
    306          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \        0x0   0x4001'1400        DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \        0x0   0x4001'1000        DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \        0x0   0x4001'244C        DC32     0x4001244c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \        0x0   0x....'....        DC32     ADC_Value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \        0x0   0x4002'0008        DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \        0x0   0x4001'2400        DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_10:
   \        0x0   0x....'....        DC32     btnFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_11:
   \        0x0   0x....'....        DC32     gasFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_12:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_13:
   \        0x0   0x000F'4240        DC32     0xf4240

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x31 0x32          DC8 49, 50, 51, 52, 53, 54, 55, 56, 57, 42, 48, 35

   \              0x33 0x34    

   \              0x35 0x36    

   \              0x37 0x38    

   \              0x39 0x2A    

   \              0x30 0x23

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ADC_Configure
        32   -> ADC_Cmd
        32   -> ADC_DMACmd
        32   -> ADC_GetCalibrationStatus
        32   -> ADC_GetResetCalibrationStatus
        32   -> ADC_Init
        32   -> ADC_RegularChannelConfig
        32   -> ADC_ResetCalibration
        32   -> ADC_SoftwareStartConvCmd
        32   -> ADC_StartCalibration
      24   ControlPWM
        24   -> TIM_OC3Init
       8   DMA1_Channel1_IRQHandler
         8   -> DMA_ClearITPendingBit
         8   -> DMA_GetITStatus
      56   DMA_Configure
        56   -> DMA_Cmd
        56   -> DMA_ITConfig
        56   -> DMA_Init
       0   Delay
       8   EXTI15_10_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> GPIO_ReadInputDataBit
      16   EXTI_Configure
        16   -> EXTI_Init
        16   -> GPIO_EXTILineConfig
      24   GetLCDNumber
       8   GpioInit
         8   -> GPIO_Init
       8   NVIC_Configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> __NVIC_EnableIRQ
       8   RCCInit
         8   -> RCC_AHBPeriphClockCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
       8   ResetFireAlarm
         8   -> ControlPWM
         8   -> GPIO_ResetBits
       8   SetFireAlarm
         8   -> ControlPWM
         8   -> GPIO_SetBits
      40   TIM_Configure
        40   -> TIM_ARRPreloadConfig
        40   -> TIM_Cmd
        40   -> TIM_OC3Init
        40   -> TIM_OC3PreloadConfig
        40   -> TIM_TimeBaseInit
       0   __NVIC_EnableIRQ
       8   main
         8   -> ADC_Configure
         8   -> DMA_Configure
         8   -> Delay
         8   -> EXTI_Configure
         8   -> GPIO_ResetBits
         8   -> GpioInit
         8   -> NVIC_Configure
         8   -> RCCInit
         8   -> ResetFireAlarm
         8   -> SetFireAlarm
         8   -> SystemInit
         8   -> TIM_Configure


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
      12  ?_0
     118  ADC_Configure
       2  ADC_Value
      36  ControlPWM
      46  DMA1_Channel1_IRQHandler
      86  DMA_Configure
      14  Delay
      56  EXTI15_10_IRQHandler
      42  EXTI_Configure
      72  GetLCDNumber
     116  GpioInit
     108  NVIC_Configure
      62  RCCInit
      34  ResetFireAlarm
      34  SetFireAlarm
     102  TIM_Configure
      30  __NVIC_EnableIRQ
       4  btnFlag
       4  gasFlag
       4  idx
      82  main
       4  password
       4  wrongcnt
       4  wrongflag

 
    22 bytes in section .bss
     4 bytes in section .data
    12 bytes in section .rodata
 1'094 bytes in section .text
 
 1'094 bytes of CODE  memory
    12 bytes of CONST memory
    26 bytes of DATA  memory

Errors: none
Warnings: none
