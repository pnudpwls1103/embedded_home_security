###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         25/Nov/2022  15:39:34
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  C:\Embedded\week3\user\main.c
#    Command line      =
#        -f C:\Embedded\week3\Debug\Obj\user\main.o.rsp
#        (C:\Embedded\week3\user\main.c -D USE_STDPERIPH_DRIVER -D STM32F10X_CL
#        -lC C:\Embedded\week3\Debug\List\user -o
#        C:\Embedded\week3\Debug\Obj\user --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Embedded\week3\libraries\CMSIS\DeviceSupport\ -I
#        C:\Embedded\week3\libraries\CMSIS\DeviceSupport\Startup\ -I
#        C:\Embedded\week3\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\ -I
#        C:\Embedded\week3\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\ -I
#        C:\Embedded\week3\user\ -I C:\Embedded\week3\libraries\LCD\ -I
#        C:\Embedded\week3\user\inc\ -Ol -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n C:\Embedded\week3\Debug\Obj\user\main.o.d
#    Locale            =  C
#    List file         =  C:\Embedded\week3\Debug\List\user\main.lst
#    Object file       =  C:\Embedded\week3\Debug\Obj\user\main.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Embedded\week3\user\main.c
      1          #include "stm32f10x.h"
      2          #include "core_cm3.h"
      3          #include "misc.h"
      4          #include "stm32f10x_gpio.h"
      5          #include "stm32f10x_rcc.h"
      6          #include "stm32f10x_usart.h"
      7          #include "stm32f10x_adc.h"
      8          #include "lcd.h"
      9          #include "touch.h"
     10          
     11          // volatile unsigned 32bits

   \                                 In section .bss, align 4
     12          volatile uint32_t ADC_Value[2];
   \                     ADC_Value:
   \        0x0                      DS8 8
     13          
     14          /* function prototype */
     15          void RCCInit(void);
     16          void GpioInit(void);
     17          void EXTI_Configure(void);
     18          void DMA_Configure(void);
     19          void ADC_Configure(void);
     20          void NVIC_Configure(void);
     21          
     22          void EXTI1_IRQHandler(void);
     23          void EXTI15_10_IRQHandler(void);
     24          void Delay(void);
     25          

   \                                 In section .bss, align 4
     26          int sensorFlag = 0;
   \                     sensorFlag:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     27          int btnFlag = 0;
   \                     btnFlag:
   \        0x0                      DS8 4

   \                                 In section .text, align 2, keep-with-next
     28          void RCCInit(void)
     29          {	
   \                     RCCInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     30                  /* Alternate Function IO clock enable */
     31                  //RCC_APB2PeriphClockCmd(RCC_APB2ENR_ADC1EN, ENABLE);
     32                  //RCC_AHBPeriphClockCmd(RCC_AHBENR_DMA1EN, ENABLE);
     33                  //RCC_APB2PeriphClockCmd(RCC_APB2ENR_AFIOEN, ENABLE);
     34                  
     35                  // 가스센서 Digital pin
     36                  //RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPEEN, ENABLE);
     37                  
     38                  // 인체감지센서 Digital pin
     39                  //RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPBEN, ENABLE);
     40                  
     41                  // 릴레이모듈 (부저)
     42                  RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPCEN, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2010             MOVS     R0,#+16
   \        0x6   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     43                  RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPDEN, ENABLE);
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x2020             MOVS     R0,#+32
   \        0xE   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     44                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     45          }
   \       0x1A   0xBD01             POP      {R0,PC}
     46          
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void GpioInit(void)
     49          {
   \                     GpioInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     50                  GPIO_InitTypeDef GPIO_InitStructure;
     51                  
     52                  //GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
     53                  //GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     54                  //GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
     55                  //GPIO_Init(GPIOA, &GPIO_InitStructure);
     56                  
     57                  //GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
     58                  //GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     59                  //GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
     60                  //GPIO_Init(GPIOE, &GPIO_InitStructure);
     61                  
     62                  //GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
     63                  //GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     64                  //GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
     65                  //GPIO_Init(GPIOB, &GPIO_InitStructure);
     66          
     67                  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
   \        0x2   0xF44F 0x6000      MOV      R0,#+2048
   \        0x6   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     68                  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \        0xA   0x2003             MOVS     R0,#+3
   \        0xC   0xF88D 0x0002      STRB     R0,[SP, #+2]
     69                  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
   \       0x10   0x2048             MOVS     R0,#+72
   \       0x12   0xF88D 0x0003      STRB     R0,[SP, #+3]
     70                  GPIO_Init(GPIOD, &GPIO_InitStructure);
   \       0x16   0x4669             MOV      R1,SP
   \       0x18   0x....             LDR.N    R0,??DataTable6
   \       0x1A   0x.... 0x....      BL       GPIO_Init
     71                  
     72                  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
   \       0x1E   0xF44F 0x7080      MOV      R0,#+256
   \       0x22   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     73                  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x26   0x2003             MOVS     R0,#+3
   \       0x28   0xF88D 0x0002      STRB     R0,[SP, #+2]
     74                  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \       0x2C   0x2010             MOVS     R0,#+16
   \       0x2E   0xF88D 0x0003      STRB     R0,[SP, #+3]
     75                  GPIO_Init(GPIOC, &GPIO_InitStructure);
   \       0x32   0x4669             MOV      R1,SP
   \       0x34   0x....             LDR.N    R0,??DataTable6_1
   \       0x36   0x.... 0x....      BL       GPIO_Init
     76          }
   \       0x3A   0xBD01             POP      {R0,PC}
     77          

   \                                 In section .text, align 2, keep-with-next
     78          void EXTI_Configure(void)
     79          {
   \                     EXTI_Configure: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
     80                  EXTI_InitTypeDef EXTI_InitStructure;
     81                  
     82                  // 인체감지센서 EXTI (PB1)
     83                  //GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource1);
     84                  //EXTI_InitStructure.EXTI_Line = EXTI_Line1;
     85                  //EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
     86                  //EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
     87                  //EXTI_InitStructure.EXTI_LineCmd = ENABLE;
     88                  //EXTI_Init(&EXTI_InitStructure);
     89                  
     90                  // 버튼 EXTI (PD11)
     91                  GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource11);
   \        0x2   0x210B             MOVS     R1,#+11
   \        0x4   0x2003             MOVS     R0,#+3
   \        0x6   0x.... 0x....      BL       GPIO_EXTILineConfig
     92                  EXTI_InitStructure.EXTI_Line = EXTI_Line11;
   \        0xA   0xF44F 0x6000      MOV      R0,#+2048
   \        0xE   0x9000             STR      R0,[SP, #+0]
     93                  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xF88D 0x0004      STRB     R0,[SP, #+4]
     94                  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
   \       0x16   0x200C             MOVS     R0,#+12
   \       0x18   0xF88D 0x0005      STRB     R0,[SP, #+5]
     95                  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0xF88D 0x0006      STRB     R0,[SP, #+6]
     96                  EXTI_Init(&EXTI_InitStructure);
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x.... 0x....      BL       EXTI_Init
     97          }
   \       0x28   0xBD07             POP      {R0-R2,PC}

   \                                 In section .text, align 2, keep-with-next
     98          void DMA_Configure(void) {
   \                     DMA_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB08B             SUB      SP,SP,#+44
     99                  DMA_InitTypeDef DMA_Instructure;
    100                  
    101                  DMA_Instructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
   \        0x4   0x....             LDR.N    R0,??DataTable6_2
   \        0x6   0x9000             STR      R0,[SP, #+0]
    102                  DMA_Instructure.DMA_MemoryBaseAddr = (uint32_t)&ADC_Value[1];
   \        0x8   0x....             LDR.N    R0,??DataTable6_3
   \        0xA   0x9001             STR      R0,[SP, #+4]
    103                  DMA_Instructure.DMA_DIR = DMA_DIR_PeripheralSRC;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9002             STR      R0,[SP, #+8]
    104                  DMA_Instructure.DMA_BufferSize = 1;
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0x9003             STR      R0,[SP, #+12]
    105                  DMA_Instructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x9004             STR      R0,[SP, #+16]
    106                  DMA_Instructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   \       0x18   0x2080             MOVS     R0,#+128
   \       0x1A   0x9005             STR      R0,[SP, #+20]
    107                  DMA_Instructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
   \       0x1C   0xF44F 0x7000      MOV      R0,#+512
   \       0x20   0x9006             STR      R0,[SP, #+24]
    108                  DMA_Instructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
   \       0x22   0xF44F 0x6000      MOV      R0,#+2048
   \       0x26   0x9007             STR      R0,[SP, #+28]
    109                  DMA_Instructure.DMA_Mode = DMA_Mode_Circular;
   \       0x28   0x2020             MOVS     R0,#+32
   \       0x2A   0x9008             STR      R0,[SP, #+32]
    110                  DMA_Instructure.DMA_Priority = DMA_Priority_High;
   \       0x2C   0xF44F 0x5000      MOV      R0,#+8192
   \       0x30   0x9009             STR      R0,[SP, #+36]
    111                  DMA_Instructure.DMA_M2M = DMA_M2M_Enable;
   \       0x32   0xF44F 0x4080      MOV      R0,#+16384
   \       0x36   0x900A             STR      R0,[SP, #+40]
    112                  
    113                  DMA_Init(DMA1_Channel1, &DMA_Instructure);
   \       0x38   0x....             LDR.N    R4,??DataTable6_4
   \       0x3A   0x4669             MOV      R1,SP
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       DMA_Init
    114                  DMA_Cmd(DMA1_Channel1, ENABLE);
   \       0x42   0x2101             MOVS     R1,#+1
   \       0x44   0x0020             MOVS     R0,R4
   \       0x46   0x.... 0x....      BL       DMA_Cmd
    115          
    116          }
   \       0x4A   0xB00C             ADD      SP,SP,#+48
   \       0x4C   0xBD10             POP      {R4,PC}
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void ADC_Configure(void)
    119          {
   \                     ADC_Configure: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
    120                  ADC_InitTypeDef ADC_InitStructure;
    121                  
    122                  ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x9000             STR      R0,[SP, #+0]
    123                  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xF88D 0x0004      STRB     R0,[SP, #+4]
    124                  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xF88D 0x0005      STRB     R0,[SP, #+5]
    125                  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \       0x14   0xF45F 0x2060      MOVS     R0,#+917504
   \       0x18   0x9002             STR      R0,[SP, #+8]
    126                  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9003             STR      R0,[SP, #+12]
    127                  ADC_InitStructure.ADC_NbrOfChannel = 1;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0xF88D 0x0010      STRB     R0,[SP, #+16]
    128                
    129                  ADC_Init(ADC1, &ADC_InitStructure);
   \       0x24   0x....             LDR.N    R4,??DataTable6_5
   \       0x26   0x4669             MOV      R1,SP
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       ADC_Init
    130                  
    131                  ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 1, ADC_SampleTime_41Cycles5);
   \       0x2E   0x2304             MOVS     R3,#+4
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x2105             MOVS     R1,#+5
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       ADC_RegularChannelConfig
    132                  
    133                  ADC_DMACmd(ADC1, ENABLE);
   \       0x3A   0x2101             MOVS     R1,#+1
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       ADC_DMACmd
    134                  
    135                  ADC_Cmd(ADC1, ENABLE);
   \       0x42   0x2101             MOVS     R1,#+1
   \       0x44   0x0020             MOVS     R0,R4
   \       0x46   0x.... 0x....      BL       ADC_Cmd
    136                  
    137                  ADC_ResetCalibration(ADC1);
   \       0x4A   0x0020             MOVS     R0,R4
   \       0x4C   0x.... 0x....      BL       ADC_ResetCalibration
    138                  
    139                  while(ADC_GetResetCalibrationStatus(ADC1)) {}
   \                     ??ADC_Configure_0: (+1)
   \       0x50   0x0020             MOVS     R0,R4
   \       0x52   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD1FA             BNE.N    ??ADC_Configure_0
    140                  
    141                  ADC_StartCalibration(ADC1);
   \       0x5A   0x0020             MOVS     R0,R4
   \       0x5C   0x.... 0x....      BL       ADC_StartCalibration
    142                  
    143                  while(ADC_GetCalibrationStatus(ADC1)) {}
   \                     ??ADC_Configure_1: (+1)
   \       0x60   0x0020             MOVS     R0,R4
   \       0x62   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD1FA             BNE.N    ??ADC_Configure_1
    144                  
    145                  ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \       0x6A   0x2101             MOVS     R1,#+1
   \       0x6C   0x0020             MOVS     R0,R4
   \       0x6E   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
    146                  
    147          }
   \       0x72   0xB006             ADD      SP,SP,#+24
   \       0x74   0xBD10             POP      {R4,PC}
    148          

   \                                 In section .text, align 2, keep-with-next
    149          void NVIC_Configure(void)
    150          {
   \                     NVIC_Configure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    151                  NVIC_InitTypeDef NVIC_InitStructure;
    152          
    153                  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
   \        0x2   0xF44F 0x60C0      MOV      R0,#+1536
   \        0x6   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    154                  
    155                  // 인체감지센서 NVIC
    156                  //NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
    157                  //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
    158                  //NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x1;
    159                  //NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    160                  //NVIC_Init(&NVIC_InitStructure);
    161                  
    162                  // 버튼 NVIC
    163                  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
   \        0xA   0x2028             MOVS     R0,#+40
   \        0xC   0xF88D 0x0000      STRB     R0,[SP, #+0]
    164                  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x1;
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xF88D 0x0001      STRB     R0,[SP, #+1]
    165                  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x1;
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xF88D 0x0002      STRB     R0,[SP, #+2]
    166                  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0xF88D 0x0003      STRB     R0,[SP, #+3]
    167                  NVIC_Init(&NVIC_InitStructure);
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x.... 0x....      BL       NVIC_Init
    168          }
   \       0x28   0xBD01             POP      {R0,PC}
    169          

   \                                 In section .text, align 2, keep-with-next
    170          void EXTI1_IRQHandler() {
   \                     EXTI1_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    171              if (EXTI_GetITStatus(EXTI_Line1) != RESET) {
   \        0x2   0x2002             MOVS     R0,#+2
   \        0x4   0x.... 0x....      BL       EXTI_GetITStatus
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD00F             BEQ.N    ??EXTI1_IRQHandler_0
    172                  if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_1) == Bit_SET) {
   \        0xC   0x2102             MOVS     R1,#+2
   \        0xE   0x....             LDR.N    R0,??DataTable6_6
   \       0x10   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \       0x14   0x2801             CMP      R0,#+1
   \       0x16   0xD103             BNE.N    ??EXTI1_IRQHandler_1
    173                      sensorFlag = 1;
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0x....             LDR.N    R1,??DataTable6_7
   \       0x1C   0x6008             STR      R0,[R1, #+0]
   \       0x1E   0xE002             B.N      ??EXTI1_IRQHandler_2
    174                  }
    175                  else {
    176                      sensorFlag = 0;
   \                     ??EXTI1_IRQHandler_1: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x....             LDR.N    R1,??DataTable6_7
   \       0x24   0x6008             STR      R0,[R1, #+0]
    177                  }
    178                  EXTI_ClearITPendingBit(EXTI_Line1);
   \                     ??EXTI1_IRQHandler_2: (+1)
   \       0x26   0x2002             MOVS     R0,#+2
   \       0x28   0x.... 0x....      BL       EXTI_ClearITPendingBit
    179              }
    180          
    181          
    182          }
   \                     ??EXTI1_IRQHandler_0: (+1)
   \       0x2C   0xBD01             POP      {R0,PC}
    183          

   \                                 In section .text, align 2, keep-with-next
    184          void EXTI15_10_IRQHandler() {
   \                     EXTI15_10_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    185              if (EXTI_GetITStatus(EXTI_Line11) != RESET) {
   \        0x2   0xF44F 0x6000      MOV      R0,#+2048
   \        0x6   0x.... 0x....      BL       EXTI_GetITStatus
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD013             BEQ.N    ??EXTI15_10_IRQHandler_0
    186                  if (GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_11) == Bit_RESET) {
   \        0xE   0xF44F 0x6100      MOV      R1,#+2048
   \       0x12   0x....             LDR.N    R0,??DataTable6
   \       0x14   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD108             BNE.N    ??EXTI15_10_IRQHandler_1
    187                      btnFlag = (btnFlag == 0) ? 1 : 0;
   \       0x1C   0x....             LDR.N    R1,??DataTable6_8
   \       0x1E   0x6808             LDR      R0,[R1, #+0]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD102             BNE.N    ??EXTI15_10_IRQHandler_2
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0x6008             STR      R0,[R1, #+0]
   \       0x28   0xE001             B.N      ??EXTI15_10_IRQHandler_1
   \                     ??EXTI15_10_IRQHandler_2: (+1)
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x6008             STR      R0,[R1, #+0]
    188                  }
    189          
    190                  EXTI_ClearITPendingBit(EXTI_Line11);
   \                     ??EXTI15_10_IRQHandler_1: (+1)
   \       0x2E   0xF44F 0x6000      MOV      R0,#+2048
   \       0x32   0x.... 0x....      BL       EXTI_ClearITPendingBit
    191              }
    192          
    193          
    194          }
   \                     ??EXTI15_10_IRQHandler_0: (+1)
   \       0x36   0xBD01             POP      {R0,PC}
    195          

   \                                 In section .text, align 2, keep-with-next
    196          int main(void)
    197          {
   \                     main: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
    198            	SystemInit();
   \        0x2   0x.... 0x....      BL       SystemInit
    199                  RCCInit();
   \        0x6   0x.... 0x....      BL       RCCInit
    200                  GpioInit();
   \        0xA   0x.... 0x....      BL       GpioInit
    201                  EXTI_Configure();
   \        0xE   0x.... 0x....      BL       EXTI_Configure
    202                  //DMA_Configure();
    203                  //ADC_Configure();
    204                  NVIC_Configure();
   \       0x12   0x.... 0x....      BL       NVIC_Configure
    205                  
    206          	LCD_Init();
   \       0x16   0x.... 0x....      BL       LCD_Init
    207          	Touch_Configuration();
   \       0x1A   0x.... 0x....      BL       Touch_Configuration
    208          	Touch_Adjust();
   \       0x1E   0x.... 0x....      BL       Touch_Adjust
    209          	LCD_Clear(WHITE);	       
   \       0x22   0xF64F 0x74FF      MOVW     R4,#+65535
   \       0x26   0x0020             MOVS     R0,R4
   \       0x28   0x.... 0x....      BL       LCD_Clear
    210                  
    211                  GPIO_ResetBits(GPIOC, GPIO_Pin_8);
   \       0x2C   0x....             LDR.N    R5,??DataTable6_1
   \       0x2E   0xF44F 0x7180      MOV      R1,#+256
   \       0x32   0x0028             MOVS     R0,R5
   \       0x34   0x.... 0x....      BL       GPIO_ResetBits
   \       0x38   0xE005             B.N      ??main_0
    212                  while(1) {
    213                          if(btnFlag)
    214                              GPIO_SetBits(GPIOC, GPIO_Pin_8);
    215                          else
    216                              GPIO_ResetBits(GPIOC, GPIO_Pin_8);
   \                     ??main_1: (+1)
   \       0x3A   0xF44F 0x7180      MOV      R1,#+256
   \       0x3E   0x0028             MOVS     R0,R5
   \       0x40   0x.... 0x....      BL       GPIO_ResetBits
   \       0x44   0xE008             B.N      ??main_2
   \                     ??main_0: (+1)
   \       0x46   0x....             LDR.N    R6,??DataTable6_8
   \       0x48   0x6830             LDR      R0,[R6, #+0]
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD0F5             BEQ.N    ??main_1
   \       0x4E   0xF44F 0x7180      MOV      R1,#+256
   \       0x52   0x0028             MOVS     R0,R5
   \       0x54   0x.... 0x....      BL       GPIO_SetBits
    217                          LCD_ShowNum(100, 160, btnFlag, 10, BLACK, WHITE);
   \                     ??main_2: (+1)
   \       0x58   0x0020             MOVS     R0,R4
   \       0x5A   0x9001             STR      R0,[SP, #+4]
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0x9000             STR      R0,[SP, #+0]
   \       0x60   0x230A             MOVS     R3,#+10
   \       0x62   0x6832             LDR      R2,[R6, #+0]
   \       0x64   0x21A0             MOVS     R1,#+160
   \       0x66   0x2064             MOVS     R0,#+100
   \       0x68   0x.... 0x....      BL       LCD_ShowNum
   \       0x6C   0xE7EB             B.N      ??main_0
    218                          //LCD_ShowNum(100, 160, sensorFlag, 10, BLACK, WHITE);
    219                          //LCD_ShowNum(100, 160, ADC_Value[1], 10, BLACK, WHITE);
    220          	}
    221          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x4001'1400        DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x4001'1000        DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x4001'244C        DC32     0x4001244c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x....'....        DC32     ADC_Value+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x4002'0008        DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x4001'2400        DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0x....'....        DC32     sensorFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \        0x0   0x....'....        DC32     btnFlag

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ADC_Configure
        32   -> ADC_Cmd
        32   -> ADC_DMACmd
        32   -> ADC_GetCalibrationStatus
        32   -> ADC_GetResetCalibrationStatus
        32   -> ADC_Init
        32   -> ADC_RegularChannelConfig
        32   -> ADC_ResetCalibration
        32   -> ADC_SoftwareStartConvCmd
        32   -> ADC_StartCalibration
      56   DMA_Configure
        56   -> DMA_Cmd
        56   -> DMA_Init
       8   EXTI15_10_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> GPIO_ReadInputDataBit
       8   EXTI1_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> GPIO_ReadInputDataBit
      16   EXTI_Configure
        16   -> EXTI_Init
        16   -> GPIO_EXTILineConfig
       8   GpioInit
         8   -> GPIO_Init
       8   NVIC_Configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
       8   RCCInit
         8   -> RCC_APB2PeriphClockCmd
      24   main
        24   -> EXTI_Configure
        24   -> GPIO_ResetBits
        24   -> GPIO_SetBits
        24   -> GpioInit
        24   -> LCD_Clear
        24   -> LCD_Init
        24   -> LCD_ShowNum
        24   -> NVIC_Configure
        24   -> RCCInit
        24   -> SystemInit
        24   -> Touch_Adjust
        24   -> Touch_Configuration


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
     118  ADC_Configure
       8  ADC_Value
      78  DMA_Configure
      56  EXTI15_10_IRQHandler
      46  EXTI1_IRQHandler
      42  EXTI_Configure
      60  GpioInit
      42  NVIC_Configure
      28  RCCInit
       4  btnFlag
     110  main
       4  sensorFlag

 
  16 bytes in section .bss
 616 bytes in section .text
 
 616 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
